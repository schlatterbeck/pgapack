#!/bin/sh

# Simple test-runner:
# We run all the examples and compare against expected outcome.
# Split name of data file into test-name and parameters. Parameters are
# passed to stdin of the example. We remove as many lines from the input
# as we have parameters: The C and fortran examples have different
# questions (whitespace).
# The script takes an optional '-m' option for memory-debugging with
# valgrind.

VALGRIND="valgrind --track-origins=yes --leak-check=full"

memdebug=0
while getopts m flag ; do
    case "$flag" in
        m) memdebug=1
        ;;
        *) exit 1
        ;;
    esac
done
shift $(expr $OPTIND - 1)

if [ -n "$MPI" -a "$MPI" = serial -a "$memdebug" -ne 0 ]; then
    mpicmd="${VALGRIND}"
fi

if [ -n "$MPI" -a "$MPI" != serial ]; then
    nproc=-np
    fileopt=-f
    if [ "$MPI" = openmpi ] ; then
        fileopt="--hostfile"
    fi
    file="${fileopt} ${MPI_MACHINEFILE}"
    if [ "$MPI" = lam ] ; then
        file=""
    fi
    if [ "$memdebug" -ne 0 ]; then
        mpicmd="mpirun.${MPI} ${file} ${nproc} ${MPI_NUM_PROCESS} ${VALGRIND}"
    else
        mpicmd="mpirun.${MPI} ${file} ${nproc} ${MPI_NUM_PROCESS}"
    fi
fi

fn=$(basename $1 .data)
args=$(echo $fn | sed 's/_/ /g')
set $args
if [ "$fn" = instverf ]; then
    ${mpicmd} instverf
else
    dir=$1
    shift
    cmd=$1
    shift
    if  [   "$dir" = deb \
        -o  "$dir" = nsgaii \
        -o  "$dir" = nsgaiii \
        -o  "$dir" = sequence \
        -o  "$dir" = mgh \
            -a '(' "$cmd" = testprogde -o "$cmd" = testprogdertr ')' \
        -o  '(' "$dir" = c -a \
            '(' "$cmd" = maxbit -o "$cmd" = example -o "$cmd" = deb10 ')' \
            ')' \
        ]; then
        ${mpicmd} ../examples/$dir/$cmd $@
    else
        for arg in $@; do
            echo "$arg"
        done | ${mpicmd} ../examples/$dir/$cmd | grep -v '\?'
    fi
fi

