.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "PGAGetCrossoverType" "3" "2025-05-03" "" "PGAPack"
.SH NAME
PGAGetCrossoverType \- Return the type of crossover selected. 
.SH SYNOPSIS
.B int PGAGetCrossoverType(\fI\%PGAContext\fP *ctx) 
.sp
.SH EXAMPLE
.sp
.EX
PGAContext *ctx;
int crosstype;

\&...
crosstype = PGAGetCrossoverType (ctx);
switch (crosstype) {
case PGA_CROSSOVER_ONEPT:
    printf (\(dqCrossover Type = PGA_CROSSOVER_ONEPT\en\(dq);
    break;
case PGA_CROSSOVER_TWOPT:
    printf (\(dqCrossover Type = PGA_CROSSOVER_TWOPT\en\(dq);
    break;
case PGA_CROSSOVER_UNIFORM:
    printf (\(dqCrossover Type = PGA_CROSSOVER_UNIFORM\en\(dq);
    break;
case PGA_CROSSOVER_SBX:
    printf (\(dqCrossover Type = PGA_CROSSOVER_SBX\en\(dq);
    break;
case PGA_CROSSOVER_EDGE:
    printf (\(dqCrossover Type = PGA_CROSSOVER_EDGE\en\(dq);
    break;
case PGA_CROSSOVER_PMX:
    printf (\(dqCrossover Type = PGA_CROSSOVER_PMX\en\(dq);
    break;
case PGA_CROSSOVER_MODIFIED:
    printf (\(dqCrossover Type = PGA_CROSSOVER_MODIFIED\en\(dq);
    break;
case PGA_CROSSOVER_ORDER:
    printf (\(dqCrossover Type = PGA_CROSSOVER_ORDER\en\(dq);
    break;
case PGA_CROSSOVER_CYCLE:
    printf (\(dqCrossover Type = PGA_CROSSOVER_CYCLE\en\(dq);
    break;
case PGA_CROSSOVER_OBX:
    printf (\(dqCrossover Type = PGA_CROSSOVER_OBX\en\(dq);
    break;
case PGA_CROSSOVER_PBX:
    printf (\(dqCrossover Type = PGA_CROSSOVER_PBX\en\(dq);
    break;
case PGA_CROSSOVER_UOX:
    printf (\(dqCrossover Type = PGA_CROSSOVER_UOX\en\(dq);
    break;
case PGA_CROSSOVER_AEX:
    printf (\(dqCrossover Type = PGA_CROSSOVER_AEX\en\(dq);
    break;
case PGA_CROSSOVER_NOX:
    printf (\(dqCrossover Type = PGA_CROSSOVER_NOX\en\(dq);
    break;
}
.EE

 
.SH PARAMETERS
.IP \(bu 2
\fBctx\fP \-\- context variable 
.SH RETURNS
Return the integer corresponding to the symbolic constant used to specify the crossover type.
.SH LOCATION
\fI\%File cross.c\fP
.SH COPYRIGHT
1996-2025, David M. Levine, Philip L. Hallstrom, David M. Noelle, Brian P. Walenz, Dirk Eddelbuettel, Ralf Schlatterbeck
.\" Generated by docutils manpage writer.
.
